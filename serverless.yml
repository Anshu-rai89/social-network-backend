service: social-network-backend
frameworkVersion: '2'

plugins:
  - serverless-appsync-plugin
  - serverless-iam-roles-per-function
  - serverless-export-env
  - serverless-manifest-plugin

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-2
  environment:
    STAGE: ${self:custom.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

package:
  exclude:
    - package-lock.json
    - package.json
custom:
  region: ${opt:region, self:provider.region}
  appSync:
    - ${file(serverless-appsync.yaml)}
  manifest:
    postProcess: ./processManifest.js
    disablePostDeployGeneration: true
    disableOutput: true
    silent: true
  stage: ${opt:stage, self:provider.stage}

functions:
  confirmUsersSignup:
    handler: functions/confirm-users-signup.handler
    environment:
      USERS_TABLE: !Ref UsersTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: !GetAtt UsersTable.Arn
  getImageUploadUrlFunction:
    handler: functions/get-signed-url.handler
    environment:
      BUCKET_NAME: !Ref AssetsBucket
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:PutObjectAcl
        Resource: !Sub ${AssetsBucket.Arn}/*
  tweet:
    handler: functions/tweets.handler
    environment:
      TWEETS_TABLE: !Ref TweetsTable
      USERS_TABLE: !Ref UsersTable
      TIMELINES_TABLE: !Ref TimelineTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:UpdateItem
        Resource: !GetAtt UsersTable.Arn
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: 
        - !GetAtt TweetsTable.Arn
        - !GetAtt TimelineTable.Arn

  reTweet:
    handler: functions/reTweets.handler
    environment:
      TWEETS_TABLE: !Ref TweetsTable
      USERS_TABLE: !Ref UsersTable
      TIMELINES_TABLE: !Ref TimelineTable
      RETWEETS_TABLE: !Ref ReTweetsTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:UpdateItem
        Resource:
          - !GetAtt UsersTable.Arn
          - !GetAtt TweetsTable.Arn
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: 
          - !GetAtt TweetsTable.Arn
          - !GetAtt TimelineTable.Arn
          - !GetAtt ReTweetsTable.Arn
      - Effect: Allow
        Action: dynamodb:GetItem
        Resource: !GetAtt TweetsTable.Arn

  unReTweet:
    handler: functions/unReTweets.handler
    environment:
      TWEETS_TABLE: !Ref TweetsTable
      USERS_TABLE: !Ref UsersTable
      TIMELINES_TABLE: !Ref TimelineTable
      RETWEETS_TABLE: !Ref ReTweetsTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:UpdateItem
        Resource:
          - !GetAtt UsersTable.Arn
          - !GetAtt TweetsTable.Arn
      - Effect: Allow
        Action: dynamodb:DeleteItem
        Resource: 
          - !GetAtt TweetsTable.Arn
          - !GetAtt TimelineTable.Arn
          - !GetAtt ReTweetsTable.Arn
      - Effect: Allow
        Action: dynamodb:GetItem
        Resource: !GetAtt TweetsTable.Arn
      - Effect: Allow
        Action: dynamodb:QueryItem
        Resource: !Sub "${TweetsTable.Arn}/index/retweetsByCreator"

  reply:
    handler: functions/reply.handler
    environment:
      TWEETS_TABLE: !Ref TweetsTable
      USERS_TABLE: !Ref UsersTable
      TIMELINES_TABLE: !Ref TimelineTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:UpdateItem
        Resource:
          - !GetAtt UsersTable.Arn
          - !GetAtt TweetsTable.Arn
      - Effect: Allow
        Action: dynamodb:GetItem
        Resource: !GetAtt TweetsTable.Arn
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource:
          - !GetAtt TweetsTable.Arn
          - !GetAtt TimelineTable.Arn


resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: screenName
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: byScreenName
            KeySchema:
              - AttributeName: screenName
                KeyType: HASH
            Projection:
                ProjectionType: ALL
        Tags:
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: users-table
    
    TweetsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH 
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: creator
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: byCreator
            KeySchema:
              - AttributeName: creator
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
                
        Tags:
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: tweets-table
    
    TimelineTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: userId
            KeyType: HASH 
          - AttributeName: tweetId
            KeyType: RANGE 
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: tweetId
            AttributeType: S
        Tags:
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: timeline-table
    
    ReTweetsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: userId
            KeyType: HASH 
          - AttributeName: tweetId
            KeyType: RANGE 
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: tweetId
            AttributeType: S
        Tags:
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: retweets-table

    LikesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: userId
            KeyType: HASH 
          - AttributeName: tweetId
            KeyType: RANGE 
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: tweetId
            AttributeType: S
        Tags:
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: likes-table
    RelationshipsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: userId
            KeyType: HASH 
          - AttributeName: sk
            KeyType: RANGE 
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
          - AttributeName: otherUserId
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: byOtherUser
            KeySchema:
              - AttributeName: otherUserId
                KeyType: HASH
              - AttributeName: sk
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
                
        Tags:
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: likes-table

    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: false
            RequireUppercase: false
            RequireSymbols: false
        UsernameAttributes:
          - email

        Schema:
          - AttributeDataType: String
            Name: name
            Required: false
            Mutable: true
        LambdaConfig:
          PostConfirmation: !GetAtt ConfirmUsersSignupLambdaFunction.Arn
    
    UserPoolInvokeConfirmUserSignUpPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        FunctionName: !Ref ConfirmUsersSignupLambdaFunction
        Principal: cognito-idp.amazonaws.com
        SourceArn: !GetAtt UserPool.Arn
    
    WebUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref UserPool
        ClientName: web
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
    AssetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccelerateConfiguration:
          AccelerationStatus: Enabled
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - PUT
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'

  Outputs:
    AWSRegion:
      Value: ${self:custom.region}
    CognitoUserPoolId:
      Value: !Ref UserPool
    WebCognitoUserPoolClientId:
      Value: !Ref WebUserPoolClient
